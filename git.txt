@@@1
@git의 필요성

- 코드가 긴 경우에는 파일의 히스토리를 알고 있어야 한다. 처음에 뭘 작성했는지, 나중에 뭘 추가했는지, 변경 내역 등을 알고 있어야 하는데 이럴 때 git을 사용하면 것이 도움이 된다.
- 내가 원하는 파일의 변경된 내용을 확인 할 수 있다.
- git은 programming에서 주로 사용되는 도구다.
- text 파일에서만 사용 할 수 있는 것이 아니라, excel, image, song 등등 다른 파일 형식에도 사용 할 수 있다.(git 시스템은 파일을 binary format(0101010 같은 것)으로 인식하기 때문)
- git은 어떤 파일이든 수정된 내역을 알 수 있다.
- code에 주로 사용되는 도구이지만, 다른 형식의 파일도 변경 내역을 추적하는데 사용할 수 있다.

⇒ 한마디로, git은 파일을 계속 추적(Tracking)하는 것이다.

@github의 필요성

- 코딩 작업을 열심히 해놨는데, 컴퓨터를 잃어버리고 파일도 날아가고 변경한 기록도 사라지는 경우를 대비해서 github을 사용한다.
- github에는 기본적으로 변경내역을 업로드 한다.

- git은 계속 추적하면서 변경내역을 관리해주고, github에는 그 변경내역을 업로드한다.
- git은 파일의 변경내역을 게속해서 추적해주는 version control system
- github은 파일 내역과 파일들을 올려주는 공간


@@@2
 repositoy는 자신의 코드가 살고 있는 곳.
→ 코드의 변경내역과 그 히스토리를 갖고 있는 폴더.
- commit은 기본적으로 시점(pointing time)
ex) "이제 이 파일의 버전을 저장하고 싶어."라고 말하는 시점.
ex) 커밋이 255개가 있다면, 프로젝트를 255개의 버전으로 저장했다는 의미.

repository = 코드를 저장하는 폴더
git = 파일들을 주시하면서 관리해주는 도구
git hub = git의 변경 내역을 볼 수 있는 사이트(파일 업로드도 가능)


@@@3
github repository 생성 시 주의할 점
1) repository name : 공백없이 소문자로 작성할 것
2) public 으로 설정할 것
- public으로 설정하면 다른 사람들이 나의 코드를 볼 수 있기 때문에 피드백을 받을 수 있고 나 또한 다른 사람들의 코드를 보고 참고하거나 피드백을 줄 수 있음.
- private는 나만 볼 수 있음.(중요한 정보가 들어있고 남들이 보면 안되는 경우에 사용)

영상에서 주로 다룬 내용
1) github repository 생성
2) github desktop 앱을 통해 내 PC에도 해당 repository 생성

@@@4
- README.md(markdown은 서식이 있는 문서를 작성하는 것)
- README 파일은 모든 git repository가 가지고 있어야 되는 파일이다.
- "#"은 마크다운에서 제목을 만들 때 사용한다.
- publish는 게시
- commit은 이 repository의 버전을 저장하는 시점. 지금 이 시점의 파일 버전을 저장하는 것.
- commit을 하려면 commit의 타이틀이 필요하다
- commit을 한 후 push를 해줘야 github 웹사이트에서도 반영이 된다.

순서
1. 파일을 변경한 다음 저장해주고
2. github desktop으로 가면 좌측에 파일이 나타난다.
3. 파일을 체크해주고,
4. commit의 타이틀을 적어주고, commit의 버튼을 눌러 준다.
5. 마지막으로 push를 해준다.